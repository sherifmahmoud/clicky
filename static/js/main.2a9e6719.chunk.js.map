{"version":3,"sources":["components/Header/index.js","components/Header/Header.js","components/Card/index.js","components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","score","topScore","Card","className","src","alt","id","onClick","CardClicked","App","state","message","cards","file","clicked","handleCardClick","event","_this","parseInt","target","console","log","forEach","card","setState","reset","shuffleCards","newCards","shuffleArray","renderCards","map","components_Card","key","components_Header","this","Component","arr","length","newArr","indexes","i","push","x","Math","floor","random","randomIndx","splice","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a9e6719.chunk.js","sourcesContent":["import Header from './Header'\r\nexport default Header;","import React from 'react';\r\n\r\nconst Header = props => {\r\n    return (\r\n        <header>\r\n            <h1>Score: {props.score}</h1>\r\n            <h1>Top Score:{props.topScore}</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import Card from './Card'\r\nexport default Card;","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = props => {\r\n    return (\r\n        <div className=\"card\" >\r\n            <img src={props.src} alt='' id={props.id} onClick={props.CardClicked}></img>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\nimport MyHeader from './components/Header';\nimport Card from './components/Card';\nimport './App.css';\nimport Header from './components/Header';\n\n\nclass App extends Component {\n  // Setting the component's initial state\n  state = {\n    score: 0,\n    topScore: 0,\n    message: \"Click an image to begin!\",\n    cards: [\n      { id: 1, file: './assets/images/1.jpg', clicked: false },\n      { id: 2, file: './assets/images/2.jpg', clicked: false },\n      { id: 3, file: './assets/images/3.jpg', clicked: false },\n      { id: 4, file: './assets/images/4.jpg', clicked: false },\n      { id: 5, file: './assets/images/5.jpg', clicked: false },\n      { id: 6, file: './assets/images/6.jpg', clicked: false },\n      { id: 7, file: './assets/images/7.jpg', clicked: false },\n      { id: 8, file: './assets/images/8.jpg', clicked: false },\n      { id: 9, file: './assets/images/9.jpg', clicked: false },\n      { id: 10, file: './assets/images/10.jpg', clicked: false },\n      { id: 11, file: './assets/images/11.jpg', clicked: false },\n      { id: 12, file: './assets/images/12.jpg', clicked: false }\n    ]\n  };\n\n  handleCardClick = (event) => {\n    let state = this.state;\n    let id = parseInt(event.target.id);\n    console.log(id);\n    state.cards.forEach(card => {\n      if (card.id === id) {\n        console.log(card);\n        if (!card.clicked) {\n          card.clicked = true;\n          this.shuffleCards();\n          this.setState({ score: state.score + 1 });\n        } else {\n          if (state.score > state.topScore) this.setState({ topScore: state.score });\n          this.reset();\n        }\n      }\n    });\n  }\n\n  shuffleCards = () => {\n    let newCards = shuffleArray(this.state.cards);\n    this.setState({ cards: newCards });\n  }\n\n\n  reset = () => {\n    let newCards = shuffleArray(this.state.cards);\n    newCards.forEach(card => {\n      card.clicked = false;\n    });\n    this.setState({ score: 0, cards: newCards });\n\n\n  }\n\n  renderCards = () => {\n    return this.state.cards.map(card => {\n      return <Card src={card.file} id={card.id} key={card.id} CardClicked={this.handleCardClick} />\n    })\n  }\n  render() {\n    return (\n      <div id=\"app\">\n        <Header score={this.state.score} topScore={this.state.topScore} />\n        <div id=\"cardsDiv\">\n          {this.renderCards()}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nfunction shuffleArray(arr) {\n  console.log(\"Before: \" + arr.length);\n  let newArr = [];\n  let indexes = [];\n  for (let i = 0; i < arr.length; i++)indexes.push(i);\n  console.log(indexes);\n  for (let x = 0; x < arr.length; x++) {\n    let i = Math.floor(Math.random() * (indexes.length));\n    let randomIndx = indexes[i];\n    newArr.push(arr[randomIndx]);\n    indexes.splice(i, 1);\n  }\n  console.log(indexes);\n  console.log(\"After: \" + newArr.length);\n  return newArr;\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}